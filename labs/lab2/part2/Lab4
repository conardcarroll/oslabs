#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/timer.h>

static struct timer_list my_timer;

void my_timer_callback( unsigned long data ) {
   printk(KERN_EMERG "my_timer_callback called\n");
   mod_timer( &my_timer, jiffies + msecs_to_jiffies(2000) );
}
			
int init_module( void ) {
   int ret;
				
   printk("Timer module installing\n");
					
   // my_timer.function, my_timer.data
   setup_timer( &my_timer, my_timer_callback, 0 );
							
   printk("Starting timer to fire in 1 sec\n");
   ret = mod_timer( &my_timer, jiffies + msecs_to_jiffies(1000) );
   if (ret) printk("Error in mod_timer\n");
		   
   return 0;
}

 	

   union acpi_object {
      acpi_object_type type;
      struct { acpi_object_type type; u64 value; } integer;
      struct { acpi_object_type type; u32 length; char *pointer; } string;
      struct { acpi_object_type type; u32 length; u8 *pointer; } buffer;
      struct { acpi_object_type type; u32 cnt; union acpi_object *elem; } package;
      struct { acpi_object_type t; acpi_object_type s; acpi_handle hdl; } reference;
      struct { acpi_object_type t; u32 pid; acpi_io_address blk; u32 l; } processor;
      struct { acpi_object_type type; u32 sys_lvl; u32 res_odr; } power_resource;
   };

    	acpi_buffer 	    	defined in acpi/actypes.h
    	

   struct acpi_buffer {
      acpi_size length;
      void *pointer;
   };
acpi_status status;
   acpi_handle handle;
   union acpi_object *result;
   struct acpi_buffer buffer = { ACPI_ALLOCATE_BUFFER, NULL };
   int var_a, var_b;

   status = acpi_get_handle(NULL, "\\_PR_.CPU0", &handle);
   status = acpi_evaluate_object(handle, "_PSD", NULL, &buffer);
   result = buffer.pointer;
   if (result) {
      var_a = result->package.elements[0].integer.value;
      var_b = result->package.elements[2].integer.value;
      printk(KERN_EMERG "var_a=%d var_b=%d\n", var_a, var_b);
   }
